Build a web-based Voice AI Conversational Agent using LiveKit, with:

FastAPI (Python) backend

React frontend

The final solution should simulate a natural, real-time voice conversation with an AI agent (not text prompts).

üîπ Requirements

1. System Prompt (Initialization Only)

At the start of the session, define one system prompt (e.g., ‚ÄúYou are a friendly travel assistant.‚Äù).

After initialization, all communication must be voice-only (no typing).

2. Voice AI Experience with LiveKit

Use LiveKit SDKs (Web + Server) for real-time audio streaming and sessions.

Implement the following pipeline:

Speech-to-Text (STT) ‚Üí AI Model (LLM) ‚Üí Text-to-Speech (TTS)

Add turn-taking logic to:

Detect when the user stops speaking

Trigger the AI‚Äôs response

Prevent overlapping speech

3. Backend (FastAPI)

Orchestrates the pipeline (STT ‚Üí LLM ‚Üí TTS ‚Üí LiveKit)

Manages conversation sessions

Provides REST/WebSocket endpoints for the frontend

4. Frontend (React)

Simple UI with:

Start/Stop conversation button

Transcript display (user + AI turns)

Live audio playback of AI responses

5. AI-Assisted Development

Use AI coding assistants (e.g., Cursor AI, Lovable, etc.).

Free trials are sufficient; no paid tools are required.

With effective use, this task should take 3‚Äì4 hours.

üîπ Implementation Guidelines

Tech Stack

React frontend (LiveKit Web SDK)

FastAPI backend (LiveKit Server SDK)

AI Services

STT: Whisper API, Retell, or another free STT service

LLM: GPT, Claude, or equivalent (free tier acceptable)

TTS: Any free/available service

Code Quality

Modular, well-documented, and easy to follow

API keys handled securely (.env/config files)

UI

Minimal, functional, and focused on the voice AI experience

Outcome

Must support real-time, back-and-forth, natural voice conversation with AI

‚è± Timeframe

You will have 72 hours to complete the task.

As the next step, please record a Loom video demonstrating your project.
Your demo should include:

A walkthrough of the assessment you completed

A full demonstration of the solution in action

Clear coverage of all required features from the instructions

üìÖ After Submission

Once you submit your work, we will schedule an interview where you will:

Demo the application live

Explain your architecture

Show your turn-taking logic

Share how you used AI assistants during development

‚ö° Important Notes

LiveKit is mandatory (no substitutes).

Turn-taking algorithm is mandatory (not just STT ‚Üí LLM ‚Üí TTS).

Only one system prompt at session start ‚Äî all remaining interaction must be voice-driven.

Use AI coding tools to accelerate development.